FROM runmymind/docker-android-sdk:ubuntu-standalone-20230711
# the above docker file can be found here: https://github.com/mindrunner/docker-android-sdk/blob/main/ubuntu/standalone/Dockerfile

RUN apt update && apt install -y \
    build-essential \
    pkg-config \
    git \
    ssh \
    curl \
    openssl \
    libssl-dev \
    wget \
    gettext \
    autoconf \
    automake \
    libtool \
    zip
RUN apt install -y g++-aarch64-linux-gnu libc6-dev-arm64-cross
RUN apt install -y libgtk-3-dev libwebkit2gtk-4.1-dev libayatana-appindicator3-dev librsvg2-dev librust-alsa-sys-dev

WORKDIR /root
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | bash -s -- -y
# pretty sure these next 2 lines aren't needed
# RUN . $HOME/.cargo/env && rustup target add aarch64-unknown-linux-gnu
# RUN . $HOME/.cargo/env && rustup toolchain install stable-aarch64-unknown-linux-gnu
RUN . $HOME/.cargo/env && rustup target add aarch64-linux-android
RUN . $HOME/.cargo/env && cargo install --git https://github.com/tauri-apps/tauri-mobile

WORKDIR /root/cmake
RUN wget https://github.com/Kitware/CMake/releases/download/v3.23.1/cmake-3.23.1.tar.gz
RUN tar -xzvf cmake-3.23.1.tar.gz
RUN cd cmake-3.23.1 && ./configure
RUN cd cmake-3.23.1 && make -j$(nproc --ignore=2)
RUN cd cmake-3.23.1 && make install

# saving this for reference. the android-sdk docker container already has everything in /opt/android-sdk-linux
# WORKDIR /root/android
# RUN wget https://dl.google.com/android/repository/android-ndk-r25c-linux.zip
# RUN unzip android-ndk-r25c-linux.zip

ENV MY_ANDROID_NDK_PATH=/opt/android-sdk-linux/ndk-bundle
ENV MY_SYSROOT=$MY_ANDROID_NDK_PATH/toolchains/llvm/prebuilt/linux-x86_64
 
ENV TOOLCHAIN_BIN_PATH=$MY_SYSROOT/bin
ENV TOOLCHAIN_PREFIX=$TOOLCHAIN_BIN_PATH/aarch64-linux-android30-
ENV LLVM_TOOLCHAIN_PREFIX=$MY_SYSROOT/bin/llvm-

# a lot of these environment variables were copied from cross-rs https://github.com/cross-rs/cross
# cargo seems to append the target name to AR, CC, etc. 
# other code uses CC, LD, etc. Those are defined after.
# some variables that cross-rs used may not be needed, like TMPDIR. 
ENV CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER="$TOOLCHAIN_PREFIX"clang \
    AR_aarch64_linux_android="$LLVM_TOOLCHAIN_PREFIX"ar \
    AS_aarch64_linux_android="$LLVM_TOOLCHAIN_PREFIX"as \
    CC_aarch64_linux_android="$TOOLCHAIN_PREFIX"clang \
    CXX_aarch64_linux_android="$TOOLCHAIN_PREFIX"clang++ \
    LD_aarch64_linux_android=$TOOLCHAIN_BIN_PATH/ld \
    NM_aarch64_linux_android="$LLVM_TOOLCHAIN_PREFIX"-nm \
    OBJCOPY_aarch64_linux_android="$LLVM_TOOLCHAIN_PREFIX"objcopy \
    OBJDUMP_aarch64_linux_android="$LLVM_TOOLCHAIN_PREFIX"objdump \
    RANLIB_aarch64_linux_android="$LLVM_TOOLCHAIN_PREFIX"ranlib \
    READELF_aarch64_linux_android="$LLVM_TOOLCHAIN_PREFIX"readelf \
    SIZE_aarch64_linux_android="$LLVM_TOOLCHAIN_PREFIX"size \
    STRINGS_aarch64_linux_android="$LLVM_TOOLCHAIN_PREFIX"strings \
    STRIP_aarch64_linux_android="$LLVM_TOOLCHAIN_PREFIX"strip \
    CMAKE_TOOLCHAIN_FILE_aarch64_linux_android=$MY_ANDROID_NDK_PATH/build/cmake/android.toolchain.cmake \
    BINDGEN_EXTRA_CLANG_ARGS_aarch64_linux_android="--sysroot=$MY_SYSROOT" \
    DEP_Z_INCLUDE="$MY_SYSROOT/usr/include"/ \
    RUST_TEST_THREADS=1 \
    TMPDIR=/tmp/ \
    ANDROID_DATA=/ \
    ANDROID_DNS_MODE=local \
    ANDROID_ROOT=/system \
    CROSS_CMAKE_SYSTEM_NAME=Android \
    CROSS_CMAKE_SYSTEM_PROCESSOR=aarch64 \
    CROSS_CMAKE_CRT=android \
    CROSS_CMAKE_OBJECT_FLAGS="-DANDROID -ffunction-sections -fdata-sections -fPIC" \
    PKG_CONFIG_SYSROOT_DIR=/

ENV CC=$CC_aarch64_linux_android \
    CXX=$CXX_aarch64_linux_android \
    LD=$LD_aarch64_linux_android \
    AR=$AR_aarch64_linux_android

# for ring library: https://github.com/briansmith/ring/blob/main/BUILDING.md. 
# one of their dependencies seems to use non-standard environment variables for CC and AR. 
ENV TARGET_CC=$CC_aarch64_linux_android TARGET_AR=$AR_aarch64_linux_android

# cross compile opus 
WORKDIR /root
RUN git clone https://github.com/xiph/opus.git
WORKDIR /root/opus
RUN git checkout 7b05f44f4baadf34d8d1073f4ff69f1806d5cdb4
RUN ./autogen.sh
RUN ./configure --host=aarch64-linux-android
RUN make -j$(nproc --ignore=2)

# for audiopus_sys
ENV OPUS_STATIC=true OPUS_LIB_DIR=/root/opus/.libs

# for tauri mobile
ENV NDK_HOME=/opt/android-sdk-linux/ndk-bundle SDK_HOME=/opt/android-sdk-linux

WORKDIR /root/build

CMD ["bash"]


# docker build . -t aarch64-builder -f Dockerfile.aarch64-android
# docker run --rm -ti -v `pwd`:/root/build aarch64-builder
# cargo android apk build aarch64
# cargo build --target aarch64-linux-android --verbose
