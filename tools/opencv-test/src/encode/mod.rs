mod aom;
#[cfg(feature = "all")]
mod h264;
#[cfg(feature = "all")]
mod rav1e;
#[cfg(feature = "all")]
mod x264;
pub use crate::encode::aom::encode_aom;
#[cfg(feature = "all")]
pub use crate::encode::h264::encode_h264;
#[cfg(feature = "all")]
pub use crate::encode::rav1e::encode_rav1e;
#[cfg(feature = "all")]
pub use crate::encode::x264::encode_x264;
use crate::utils::yuv::ColorScale;

use clap::Parser;

// transforms the input file to h264
#[derive(Parser, Debug)]
pub struct Args {
    /// an mp4 file generated by opencv
    pub input: String,
    /// name of the file to save
    pub output: String,
    /// The codec to use
    pub codec: CodecTypes,
    /// Optional parameter. defaults to Lossy.
    /// NotLossy doubles the size of each frame so that converting to YUV420
    /// doesn't lose any chromiance information.
    pub encoding_type: Option<EncodingType>,
    ///specifies the RGB to YUV transformation matrix
    pub color_scale: Option<ColorScale>,
    /// use optimized version. currently only works for aom in lossy mode.
    /// if set, overrides encoding_type
    pub mode: Option<Mode>,
}

#[derive(Debug, Clone, clap::ValueEnum)]
pub enum CodecTypes {
    #[cfg(feature = "all")]
    /// OpenH264
    H264,
    #[cfg(feature = "all")]
    /// x264
    X264,
    #[cfg(feature = "all")]
    /// av1 (rav1e)
    RAV1E,
    /// av1 (aom)
    AOM,
}

#[derive(Debug, Clone, clap::ValueEnum)]
pub enum EncodingType {
    /// convert from BGR24 to YUV420
    Lossy,
    /// expand BGR24 image before converting to YUV420
    NotLossy,
}

#[derive(Debug, Clone, Copy, clap::ValueEnum)]
pub enum Mode {
    Normal,
    /// attempt to use opencv matrix multiplication
    /// to speed up the conversion from BGR to YUV
    Faster,
}
