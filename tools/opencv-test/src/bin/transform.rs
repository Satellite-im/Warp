use std::{
    fs::OpenOptions,
    io::{BufWriter, Write},
};

use clap::Parser;
use opencv::{prelude::*, videoio};
use opencv_test::utils::bgr_to_yuv;

// transforms the input file to h264
#[derive(Parser, Debug)]
struct Args {
    /// an mp4 file generated by opencv
    input: String,
    /// name of the file to save
    output: String,
}

fn main() -> anyhow::Result<()> {
    let args = Args::parse();

    let mut cam = videoio::VideoCapture::from_file(&args.input, videoio::CAP_ANY)?;
    let opened = videoio::VideoCapture::is_opened(&cam)?;
    if !opened {
        panic!("Unable to open video file!");
    }

    // https://docs.opencv.org/3.4/d4/d15/group__videoio__flags__base.html
    let frame_width = cam.get(3)? as _;
    let frame_height = cam.get(4)? as _;
    let fps = cam.get(5)? as _;

    let output_file = OpenOptions::new()
        .read(false)
        .write(true)
        .create(true)
        .truncate(true)
        .open(args.output)?;
    let mut writer = BufWriter::new(output_file);

    let config =
        openh264::encoder::EncoderConfig::new(frame_width, frame_height).max_frame_rate(fps); //.rate_control_mode(openh264::encoder::RateControlMode::Timestamp);

    let mut encoder = openh264::encoder::Encoder::with_config(config)?;

    // https://web.archive.org/web/20180423091842/http://www.equasys.de/colorconversion.html
    // be sure to pick the full-scale conversion

    loop {
        let mut frame = Mat::default();
        if !cam.read(&mut frame)? {
            println!("read entire video file");
            break;
        }

        let sz = frame.size()?;
        let width = sz.width as usize;
        let height = sz.height as usize;
        if width > 0 {
            let p = frame.data_mut();
            let len = width * height * 3;
            let s = std::ptr::slice_from_raw_parts(p, len as _);
            let s: &[u8] = unsafe { &*s };

            let new_len = len * 4;
            let mut s2 = Vec::new();
            s2.resize(new_len as _, 0);

            let mut set_pixel = |row: usize, col: usize, b, g, r| {
                let base_pos = (row + col * width * 2) * 3;
                s2[base_pos] = b;
                s2[base_pos + 1] = g;
                s2[base_pos + 2] = r;
            };

            for row in 0..height {
                for col in 0..width {
                    let base_pos = (row + col * width) * 3;
                    let b = s[base_pos];
                    let g = s[base_pos + 1];
                    let r = s[base_pos + 2];

                    let new_col = col * 2;
                    let new_row = row * 2;
                    set_pixel(new_row, new_col, b, g, r);
                    set_pixel(new_row + 1, new_col, b, g, r);
                    set_pixel(new_row, new_col + 1, b, g, r);
                    set_pixel(new_row + 1, new_col + 1, b, g, r);
                }
            }

            let yuv = bgr_to_yuv(&s2, width * 2, height * 2);
            let yuv_buf = opencv_test::utils::YUVBuf {
                yuv,
                width: sz.width as _,
                height: sz.height as _,
            };

            let encoded_stream = encoder.encode(&yuv_buf)?;
            encoded_stream.write(&mut writer)?;
        }
    }
    writer.flush()?;
    Ok(())
}
